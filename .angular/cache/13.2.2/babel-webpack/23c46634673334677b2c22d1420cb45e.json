{"ast":null,"code":"import _asyncToGenerator from \"/home/vrsa/Desktop/frontend/ck-volunteer-log-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpEventType, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class Juice {\n  constructor(http) {\n    this.http = http; //private token: string;\n\n    this.language = \"\";\n    this.endpoint = \"\";\n    console.log('JuicEcommerce', 'Loaded');\n  }\n\n  loadConfiguration(path) {\n    return new Promise((resolve, reject) => {\n      this.http.get(path).subscribe(data => {\n        resolve(data);\n      }, error => {\n        resolve(null);\n      });\n    });\n  }\n  /** Set EndPoint external */\n\n\n  setEndPoint(uri) {\n    this.endpoint = uri;\n  }\n\n  getEndPoint() {\n    return this.endpoint;\n  }\n\n  getToken() {\n    try {\n      const token = localStorage.getItem('juice-token');\n      if (!token) return \"\";\n      return JSON.parse(token);\n    } catch (exception) {\n      this.removeToken();\n      return \"\";\n    }\n  }\n\n  isLoggedIn() {\n    const token = this.getToken();\n    return !!token;\n  }\n\n  setToken(token) {\n    localStorage.setItem('juice-token', JSON.stringify(token));\n  }\n\n  clear() {\n    localStorage.clear();\n  }\n\n  removeToken() {\n    localStorage.removeItem('juice-token');\n    return true;\n  }\n\n  setLanguage(language) {\n    if (language.length === 2) {\n      language = language + '-' + language.toUpperCase();\n    }\n\n    this.language = language;\n    localStorage.setItem('lang', language);\n  }\n\n  getLanguage() {\n    if (this.language) {\n      return this.language;\n    } else if (localStorage.getItem('lang')) {\n      return localStorage.getItem('lang');\n    } else {\n      return null;\n    }\n  } // ---- Authentication ------------------------\n\n  /**\n   * Initialize connection to JuicEcommerce API.\n   * If successful the session token will be exchanged and stored\n   * in local storage.\n   *\n   * Returns {Promise<boolean>}\n   */\n\n\n  init() {\n    return new Promise((resolve, reject) => {\n      /*this.requestToken().then(success => {\n          resolve(true);\n      });*/\n      resolve(true);\n    });\n  }\n\n  requestToken() {\n    var _this = this;\n\n    return new Promise( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (resolve, reject) {\n        const token = _this.getToken();\n\n        if (typeof token === 'undefined' || token == null) {\n          return resolve(false);\n        } else {\n          let headers = new HttpHeaders();\n          headers = headers.append('juice-language', _this.language);\n          headers = headers.append('juice-token', token);\n\n          _this.http.get(_this.endpoint + '/user/auth/validate-token', {\n            headers: headers,\n            observe: 'response'\n          }).subscribe(response => {\n            const newToken = response.headers.get('juice-token');\n\n            _this.setToken(newToken);\n\n            resolve(true);\n          }, error => {\n            if (error.status == 403) window.location.reload();\n\n            _this.removeToken();\n          });\n        }\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Sending e-mail and password to API for user authentication\n   *\n   * @param strategy\n   * @param data\n   * @returns {Promise<any>}\n   */\n\n\n  login(strategy, data) {\n    return new Promise((resolve, reject) => {\n      const body = {\n        strategy: strategy,\n        email: data.email || null,\n        password: data.password || null,\n        code: data.code || null,\n        redirectUri: data.redirectUri || null,\n        legalAgreement: data.legalAgreement || null\n      };\n      let headers = new HttpHeaders();\n      headers = headers.append('juice-language', this.language);\n      this.http.post(this.endpoint + '/user/auth/login', body, {\n        headers: headers,\n        observe: 'response'\n      }).subscribe(response => {\n        const newToken = response.headers.get('juice-token');\n        if (newToken) this.setToken(newToken);\n        resolve(response.body);\n      }, error => {\n        if (error.status == 403) window.location.reload();\n        reject(error);\n      });\n    });\n  }\n  /**\n   * Register new user\n   * @param body\n   */\n\n\n  register(body) {\n    return new Promise((resolve, reject) => {\n      let headers = new HttpHeaders();\n      headers = headers.append('juice-language', this.language);\n      this.http.post(this.endpoint + '/user/auth/register', body, {\n        headers: headers,\n        observe: 'response'\n      }).subscribe(data => {\n        const newToken = data.headers.get('juice-token');\n\n        if (newToken) {\n          this.setToken(newToken);\n        }\n\n        resolve(data.body);\n      }, error => {\n        if (error.status == 403) window.location.reload();\n        resolve(error);\n      });\n    });\n  }\n  /**\n   * Universal function for sending data using POST method\n   *\n   * @param {string} url\n   * @param body\n   * @returns {Promise<any>}\n   */\n\n\n  post(url, body) {\n    return new Promise((resolve, reject) => {\n      let headers = new HttpHeaders();\n      headers = headers.append('juice-token', this.getToken());\n      headers = headers.append('juice-language', this.language);\n      this.http.post(this.endpoint + url, body, {\n        headers: headers,\n        observe: 'response'\n      }).subscribe(data => {\n        const newToken = data.headers.get('juice-token');\n\n        if (newToken) {\n          this.setToken(newToken);\n        }\n\n        resolve(data.body);\n      }, err => {\n        if (err.status === 403) window.location.reload();\n        reject(err);\n      });\n    });\n  }\n  /**\n   * Universal function for sending data using PUT method\n   *\n   * @param {string} url\n   * @param body\n   * @returns {Promise<any>}\n   */\n\n\n  put(url, body) {\n    return new Promise((resolve, reject) => {\n      let headers = new HttpHeaders();\n      headers = headers.append('juice-token', this.getToken());\n      headers = headers.append('juice-language', this.language);\n      this.http.put(this.endpoint + url, body, {\n        headers: headers,\n        observe: 'response'\n      }).subscribe(data => {\n        const newToken = data.headers.get('juice-token');\n\n        if (newToken) {\n          this.setToken(newToken);\n        }\n\n        resolve(data.body);\n      }, error => {\n        if (error.status === 403) window.location.reload();\n        reject(error);\n      });\n    });\n  }\n  /**\n   * Sending request for some resource specified in params\n   *\n   * @param {string} url\n   * @returns {Promise<any>}\n   */\n\n\n  get(url) {\n    return new Promise((resolve, reject) => {\n      let headers = new HttpHeaders();\n      headers = headers.append('juice-token', this.getToken());\n      headers = headers.append('juice-language', this.language);\n      this.http.get(this.endpoint + url, {\n        headers: headers,\n        observe: 'response'\n      }).subscribe(data => {\n        const newToken = data.headers.get('juice-token');\n\n        if (newToken) {\n          this.setToken(newToken);\n        }\n\n        resolve(data.body);\n      }, error => {\n        if (error.status === 403) window.location.reload();\n\n        if (error.status === 0) {\n          this.removeToken();\n          window.location.reload();\n        }\n\n        reject(error);\n      });\n    });\n  }\n  /**\n   * Deletes resource specified in params\n   *\n   * @param url\n   * @param params\n   * @returns {Promise<any>}\n   */\n\n\n  delete(url, params) {\n    return new Promise((resolve, reject) => {\n      let _params = '';\n\n      for (const key in params) {\n        _params += '/' + params[key];\n      }\n\n      let headers = new HttpHeaders();\n      headers = headers.append('juice-token', this.getToken());\n      this.http.delete(this.endpoint + url + _params, {\n        headers: headers,\n        observe: 'response'\n      }).subscribe(data => {\n        const newToken = data.headers.get('juice-token');\n\n        if (newToken) {\n          this.setToken(newToken);\n        }\n\n        resolve(data);\n      }, error => {\n        if (error.status === 403) window.location.reload();\n        reject(error);\n      });\n    });\n  }\n\n  upload(url, payload, body) {\n    return new Promise((resolve, reject) => {\n      let headers = new HttpHeaders();\n      headers = headers.append('juice-token', this.getToken());\n      headers.set('content-type', 'multipart/form-data');\n      headers.set('Content-Length', payload.length);\n      let formData = new FormData();\n      formData.append('file', payload);\n\n      if (body) {\n        formData.append('body', JSON.stringify(body));\n      }\n\n      this.http.post(this.endpoint + url, formData, {\n        headers: headers,\n        observe: 'events',\n        reportProgress: true\n      }).subscribe(event => {\n        if (event.type === HttpEventType.ResponseHeader) {\n          let newToken = event.headers.get('juice-token');\n\n          if (newToken) {\n            this.setToken(newToken);\n          }\n        }\n\n        if (event.type === HttpEventType.Response) {\n          resolve(event.body);\n        }\n      }, error => {\n        if (error.status == 403) window.location.reload();\n        reject(error);\n      });\n    });\n  }\n\n  getBlob(url, body) {\n    return new Promise((resolve, reject) => {\n      let headers = new HttpHeaders();\n      headers = headers.append('juice-token', this.getToken());\n      this.http.post(this.endpoint + url, body, {\n        headers: headers,\n        observe: 'events',\n        responseType: 'blob',\n        reportProgress: true\n      }).subscribe(event => {\n        if (event.type === HttpEventType.ResponseHeader) {\n          const newToken = event.headers.get('juice-token');\n\n          if (newToken) {\n            this.setToken(newToken);\n          }\n        }\n\n        if (event.type === HttpEventType.Response) {\n          resolve(event.body);\n        }\n      }, err => {\n        if (err.status == 403) window.location.reload();\n        reject(err);\n      });\n    });\n  }\n\n  getNoHeaders(url) {\n    return new Promise((resolve, reject) => {\n      let headers = new HttpHeaders();\n      headers = headers.append('juice-language', this.language);\n      this.http.get(this.endpoint + url, {\n        headers: headers,\n        observe: 'response'\n      }).subscribe(data => {\n        resolve(data.body);\n      }, error => {\n        reject(error);\n      });\n    });\n  }\n\n  postNoHeaders(url, body) {\n    return new Promise((resolve, reject) => {\n      let headers = new HttpHeaders();\n      headers = headers.append('juice-language', this.language);\n      this.http.post(this.endpoint + url, body, {\n        headers: headers,\n        observe: 'response'\n      }).subscribe(data => {\n        resolve(data.body);\n      }, err => {\n        reject(err);\n      });\n    });\n  }\n\n  putNoHeaders(url, body) {\n    return new Promise((resolve, reject) => {\n      let headers = new HttpHeaders();\n      headers = headers.append('juice-language', this.language);\n      this.http.put(this.endpoint + url, body, {\n        headers: headers,\n        observe: 'response'\n      }).subscribe(data => {\n        resolve(data.body);\n      }, error => {\n        reject(error);\n      });\n    });\n  }\n\n  deleteNoHeaders(url) {\n    return new Promise((resolve, reject) => {\n      let headers = new HttpHeaders();\n      headers = headers.append('juice-language', this.language);\n      this.http.delete(this.endpoint + url, {\n        headers: headers,\n        observe: 'response'\n      }).subscribe(data => {\n        resolve(data.body);\n      }, error => {\n        reject(error);\n      });\n    });\n  }\n\n  getBlobNoHeaders(url, body) {\n    return new Promise((resolve, reject) => {\n      this.http.post(this.endpoint + url, body, {\n        observe: 'events',\n        responseType: 'blob',\n        reportProgress: true\n      }).subscribe(event => {\n        if (event.type === HttpEventType.Response) {\n          resolve(event.body);\n        }\n      }, err => {\n        if (err.status == 403) window.location.reload();\n        reject(err);\n      });\n    });\n  }\n\n}\n\nJuice.ɵfac = function Juice_Factory(t) {\n  return new (t || Juice)(i0.ɵɵinject(i1.HttpClient));\n};\n\nJuice.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Juice,\n  factory: Juice.ɵfac\n});","map":{"version":3,"sources":["/home/vrsa/Desktop/frontend/ck-volunteer-log-frontend/src/providers/Juice.ts"],"names":["HttpEventType","HttpHeaders","i0","i1","Juice","constructor","http","language","endpoint","console","log","loadConfiguration","path","Promise","resolve","reject","get","subscribe","data","error","setEndPoint","uri","getEndPoint","getToken","token","localStorage","getItem","JSON","parse","exception","removeToken","isLoggedIn","setToken","setItem","stringify","clear","removeItem","setLanguage","length","toUpperCase","getLanguage","init","requestToken","headers","append","observe","response","newToken","status","window","location","reload","login","strategy","body","email","password","code","redirectUri","legalAgreement","post","register","url","err","put","delete","params","_params","key","upload","payload","set","formData","FormData","reportProgress","event","type","ResponseHeader","Response","getBlob","responseType","getNoHeaders","postNoHeaders","putNoHeaders","deleteNoHeaders","getBlobNoHeaders","ɵfac","Juice_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","factory"],"mappings":"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","sourcesContent":["import { HttpEventType, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class Juice {\n    constructor(http) {\n        this.http = http;\n        //private token: string;\n        this.language = \"\";\n        this.endpoint = \"\";\n        console.log('JuicEcommerce', 'Loaded');\n    }\n    loadConfiguration(path) {\n        return new Promise((resolve, reject) => {\n            this.http.get(path).subscribe(data => {\n                resolve(data);\n            }, error => {\n                resolve(null);\n            });\n        });\n    }\n    /** Set EndPoint external */\n    setEndPoint(uri) {\n        this.endpoint = uri;\n    }\n    getEndPoint() {\n        return this.endpoint;\n    }\n    getToken() {\n        try {\n            const token = localStorage.getItem('juice-token');\n            if (!token)\n                return \"\";\n            return JSON.parse(token);\n        }\n        catch (exception) {\n            this.removeToken();\n            return \"\";\n        }\n    }\n    isLoggedIn() {\n        const token = this.getToken();\n        return !!token;\n    }\n    setToken(token) {\n        localStorage.setItem('juice-token', JSON.stringify(token));\n    }\n    clear() {\n        localStorage.clear();\n    }\n    removeToken() {\n        localStorage.removeItem('juice-token');\n        return true;\n    }\n    setLanguage(language) {\n        if (language.length === 2) {\n            language = language + '-' + language.toUpperCase();\n        }\n        this.language = language;\n        localStorage.setItem('lang', language);\n    }\n    getLanguage() {\n        if (this.language) {\n            return this.language;\n        }\n        else if (localStorage.getItem('lang')) {\n            return localStorage.getItem('lang');\n        }\n        else {\n            return null;\n        }\n    }\n    // ---- Authentication ------------------------\n    /**\n     * Initialize connection to JuicEcommerce API.\n     * If successful the session token will be exchanged and stored\n     * in local storage.\n     *\n     * Returns {Promise<boolean>}\n     */\n    init() {\n        return new Promise((resolve, reject) => {\n            /*this.requestToken().then(success => {\n                resolve(true);\n            });*/\n            resolve(true);\n        });\n    }\n    requestToken() {\n        return new Promise(async (resolve, reject) => {\n            const token = this.getToken();\n            if (typeof token === 'undefined' || token == null) {\n                return resolve(false);\n            }\n            else {\n                let headers = new HttpHeaders();\n                headers = headers.append('juice-language', this.language);\n                headers = headers.append('juice-token', token);\n                this.http.get(this.endpoint + '/user/auth/validate-token', {\n                    headers: headers,\n                    observe: 'response'\n                }).subscribe((response) => {\n                    const newToken = response.headers.get('juice-token');\n                    this.setToken(newToken);\n                    resolve(true);\n                }, error => {\n                    if (error.status == 403)\n                        window.location.reload();\n                    this.removeToken();\n                });\n            }\n        });\n    }\n    /**\n     * Sending e-mail and password to API for user authentication\n     *\n     * @param strategy\n     * @param data\n     * @returns {Promise<any>}\n     */\n    login(strategy, data) {\n        return new Promise((resolve, reject) => {\n            const body = {\n                strategy: strategy,\n                email: data.email || null,\n                password: data.password || null,\n                code: data.code || null,\n                redirectUri: data.redirectUri || null,\n                legalAgreement: data.legalAgreement || null,\n            };\n            let headers = new HttpHeaders();\n            headers = headers.append('juice-language', this.language);\n            this.http.post(this.endpoint + '/user/auth/login', body, {\n                headers: headers,\n                observe: 'response'\n            }).subscribe(response => {\n                const newToken = response.headers.get('juice-token');\n                if (newToken)\n                    this.setToken(newToken);\n                resolve(response.body);\n            }, error => {\n                if (error.status == 403)\n                    window.location.reload();\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Register new user\n     * @param body\n     */\n    register(body) {\n        return new Promise((resolve, reject) => {\n            let headers = new HttpHeaders();\n            headers = headers.append('juice-language', this.language);\n            this.http.post(this.endpoint + '/user/auth/register', body, {\n                headers: headers,\n                observe: 'response'\n            }).subscribe(data => {\n                const newToken = data.headers.get('juice-token');\n                if (newToken) {\n                    this.setToken(newToken);\n                }\n                resolve(data.body);\n            }, error => {\n                if (error.status == 403)\n                    window.location.reload();\n                resolve(error);\n            });\n        });\n    }\n    /**\n     * Universal function for sending data using POST method\n     *\n     * @param {string} url\n     * @param body\n     * @returns {Promise<any>}\n     */\n    post(url, body) {\n        return new Promise((resolve, reject) => {\n            let headers = new HttpHeaders();\n            headers = headers.append('juice-token', this.getToken());\n            headers = headers.append('juice-language', this.language);\n            this.http.post(this.endpoint + url, body, {\n                headers: headers,\n                observe: 'response'\n            }).subscribe(data => {\n                const newToken = data.headers.get('juice-token');\n                if (newToken) {\n                    this.setToken(newToken);\n                }\n                resolve(data.body);\n            }, err => {\n                if (err.status === 403)\n                    window.location.reload();\n                reject(err);\n            });\n        });\n    }\n    /**\n     * Universal function for sending data using PUT method\n     *\n     * @param {string} url\n     * @param body\n     * @returns {Promise<any>}\n     */\n    put(url, body) {\n        return new Promise((resolve, reject) => {\n            let headers = new HttpHeaders();\n            headers = headers.append('juice-token', this.getToken());\n            headers = headers.append('juice-language', this.language);\n            this.http.put(this.endpoint + url, body, {\n                headers: headers,\n                observe: 'response'\n            }).subscribe(data => {\n                const newToken = data.headers.get('juice-token');\n                if (newToken) {\n                    this.setToken(newToken);\n                }\n                resolve(data.body);\n            }, error => {\n                if (error.status === 403)\n                    window.location.reload();\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Sending request for some resource specified in params\n     *\n     * @param {string} url\n     * @returns {Promise<any>}\n     */\n    get(url) {\n        return new Promise((resolve, reject) => {\n            let headers = new HttpHeaders();\n            headers = headers.append('juice-token', this.getToken());\n            headers = headers.append('juice-language', this.language);\n            this.http.get(this.endpoint + url, {\n                headers: headers,\n                observe: 'response'\n            }).subscribe(data => {\n                const newToken = data.headers.get('juice-token');\n                if (newToken) {\n                    this.setToken(newToken);\n                }\n                resolve(data.body);\n            }, error => {\n                if (error.status === 403)\n                    window.location.reload();\n                if (error.status === 0) {\n                    this.removeToken();\n                    window.location.reload();\n                }\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Deletes resource specified in params\n     *\n     * @param url\n     * @param params\n     * @returns {Promise<any>}\n     */\n    delete(url, params) {\n        return new Promise((resolve, reject) => {\n            let _params = '';\n            for (const key in params) {\n                _params += '/' + params[key];\n            }\n            let headers = new HttpHeaders();\n            headers = headers.append('juice-token', this.getToken());\n            this.http.delete(this.endpoint + url + _params, {\n                headers: headers,\n                observe: 'response'\n            }).subscribe(data => {\n                const newToken = data.headers.get('juice-token');\n                if (newToken) {\n                    this.setToken(newToken);\n                }\n                resolve(data);\n            }, error => {\n                if (error.status === 403)\n                    window.location.reload();\n                reject(error);\n            });\n        });\n    }\n    upload(url, payload, body) {\n        return new Promise((resolve, reject) => {\n            let headers = new HttpHeaders();\n            headers = headers.append('juice-token', this.getToken());\n            headers.set('content-type', 'multipart/form-data');\n            headers.set('Content-Length', payload.length);\n            let formData = new FormData();\n            formData.append('file', payload);\n            if (body) {\n                formData.append('body', JSON.stringify(body));\n            }\n            this.http.post(this.endpoint + url, formData, {\n                headers: headers,\n                observe: 'events',\n                reportProgress: true\n            }).subscribe((event) => {\n                if (event.type === HttpEventType.ResponseHeader) {\n                    let newToken = event.headers.get('juice-token');\n                    if (newToken) {\n                        this.setToken(newToken);\n                    }\n                }\n                if (event.type === HttpEventType.Response) {\n                    resolve(event.body);\n                }\n            }, error => {\n                if (error.status == 403)\n                    window.location.reload();\n                reject(error);\n            });\n        });\n    }\n    getBlob(url, body) {\n        return new Promise((resolve, reject) => {\n            let headers = new HttpHeaders();\n            headers = headers.append('juice-token', this.getToken());\n            this.http.post(this.endpoint + url, body, {\n                headers: headers,\n                observe: 'events',\n                responseType: 'blob',\n                reportProgress: true\n            }).subscribe((event) => {\n                if (event.type === HttpEventType.ResponseHeader) {\n                    const newToken = event.headers.get('juice-token');\n                    if (newToken) {\n                        this.setToken(newToken);\n                    }\n                }\n                if (event.type === HttpEventType.Response) {\n                    resolve(event.body);\n                }\n            }, err => {\n                if (err.status == 403)\n                    window.location.reload();\n                reject(err);\n            });\n        });\n    }\n    getNoHeaders(url) {\n        return new Promise((resolve, reject) => {\n            let headers = new HttpHeaders();\n            headers = headers.append('juice-language', this.language);\n            this.http.get(this.endpoint + url, {\n                headers: headers,\n                observe: 'response'\n            }).subscribe(data => {\n                resolve(data.body);\n            }, error => {\n                reject(error);\n            });\n        });\n    }\n    postNoHeaders(url, body) {\n        return new Promise((resolve, reject) => {\n            let headers = new HttpHeaders();\n            headers = headers.append('juice-language', this.language);\n            this.http.post(this.endpoint + url, body, {\n                headers: headers,\n                observe: 'response'\n            }).subscribe(data => {\n                resolve(data.body);\n            }, err => {\n                reject(err);\n            });\n        });\n    }\n    putNoHeaders(url, body) {\n        return new Promise((resolve, reject) => {\n            let headers = new HttpHeaders();\n            headers = headers.append('juice-language', this.language);\n            this.http.put(this.endpoint + url, body, {\n                headers: headers,\n                observe: 'response'\n            }).subscribe(data => {\n                resolve(data.body);\n            }, error => {\n                reject(error);\n            });\n        });\n    }\n    deleteNoHeaders(url) {\n        return new Promise((resolve, reject) => {\n            let headers = new HttpHeaders();\n            headers = headers.append('juice-language', this.language);\n            this.http.delete(this.endpoint + url, {\n                headers: headers,\n                observe: 'response'\n            }).subscribe(data => {\n                resolve(data.body);\n            }, error => {\n                reject(error);\n            });\n        });\n    }\n    getBlobNoHeaders(url, body) {\n        return new Promise((resolve, reject) => {\n            this.http.post(this.endpoint + url, body, {\n                observe: 'events',\n                responseType: 'blob',\n                reportProgress: true\n            }).subscribe((event) => {\n                if (event.type === HttpEventType.Response) {\n                    resolve(event.body);\n                }\n            }, err => {\n                if (err.status == 403)\n                    window.location.reload();\n                reject(err);\n            });\n        });\n    }\n}\nJuice.ɵfac = function Juice_Factory(t) { return new (t || Juice)(i0.ɵɵinject(i1.HttpClient)); };\nJuice.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: Juice, factory: Juice.ɵfac });\n"]},"metadata":{},"sourceType":"module"}